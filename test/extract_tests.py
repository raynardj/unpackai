"""Extract tests from Python files generated by nbdev

We will search for cells containing
* pytest
* functions test_xxx
* classes Testxxx
"""
import re
from pathlib import Path
from typing import Optional


def extract_test(src: Path, module_path: Path) -> Optional[Path]:
    """Extract test from a file and generate in a new file"""
    py_content = src.read_text(encoding="utf-8")

    # Test Cells shall be exclusively "internal cells" (because we don't want them in "__all__")
    # We will also extract based on the keywords (pytest, def test*, class Test*)
    # And after that, we will remove the code from the original file
    cells = re.findall(
        r"[\r\n]# Internal Cell.*?(?=$|[\r\n]#(?: Internal)? Cell)",
        py_content,
        flags=re.S,
    )

    test_cells = [
        c
        for c in cells
        if re.search(r"^(import pytest|def test|class Test)", c, flags=re.M)
    ]
    if not test_cells:
        print(f"... skipped {src} - No Test Cases found")
        return None

    for c in test_cells:
        py_content = py_content.replace(c, "")

    # We can now generate a test case file
    tc_repo = module_path.with_name("test")
    src_relative = src.relative_to(module_path)
    dest = tc_repo / src_relative.parent / f"test_{src.name}"
    src_mod = "unpackai." + ".".join(src_relative.with_suffix("").parts)

    test_content = f"from {src_mod} import *\n" + "".join(test_cells)
    dest.write_text(test_content, encoding="utf-8")
    print(f"Generated Test Cases from {src} to {dest}")

    src.write_text(py_content, encoding="utf-8")
    print(f"Removed Test Cases from {src}")

    return dest


module_path = Path(__file__).parent.parent / "unpackai"

if __name__ == "__main__":
    for src in module_path.rglob("*.py"):
        if src.name == "__init__.py":
            continue
        extract_test(src, module_path)
