"""Testing code generated by nbdev in unpackai/tabular/data.py"""
# Generated automatically from notebook nbs/35_tabular_data.ipynb

from unpackai.tabular.data import *

# Test Cell
from sklearn.datasets import california_housing

dt = california_housing.fetch_california_housing()
df = pd.DataFrame(dt["data"], columns=dt["feature_names"])

# Test Cell
def test_no_missing_value_basic():
    from copy import deepcopy

    df2 = deepcopy(df).head(100)

    # create missing value manually
    for i, key in enumerate(df2):
        df2[key] = list(range(10 * (i + 1))) + [None] * (9 - i) * 10
    new_df = no_missing_values(df2)
    assert (
        list(new_df.columns) == list(df2.columns)[3:]
    ), f"""
        Incorrect column filtering
        based on missing value: {list(new_df.columns)}"""


# Test Cell
from ipywidgets import Output
import json


def if_image_in_output(out: Output) -> bool:
    """
    Exam if output contains png image
    """
    for o in list(out.outputs):
        output_data = o.get("data")
        if output_data is not None:
            if "image/png" in output_data:
                return True
    return False


output = Output()
with output:
    plot_hist(df.head(100))

# Test Cell
def test_plot_hist_img_exist():
    """
    can plot_hist outpout an image
    """
    ishell = get_ipython()
    result = if_image_in_output(output)
    assert result, (
        "hist_plot image generation failed"
        + "current output"
        + json.dumps(output.outputs, indent=2)
    )


# Test Cell
# hide
def test_return_df_true():
    #   Setup
    #   Run
    corr = plot_feat_correlations(df, return_df=True)
    #   Verify
    assert isinstance(
        corr, pd.DataFrame
    ), f"should return a dataframe and got {type(corr)}"


def test_return_df_false():
    #   Setup
    #   Run
    corr = plot_feat_correlations(df, return_df=False)
    #   Verify
    assert corr is None, f"should return None and got {corr}"


test_return_df_true()
test_return_df_false()

# Test Cell
# hide
def test_non_numericals_dropped():
    #    Setup
    df_test = df.copy()
    cat_fnames = [f"categorical_{i}" for i in range(1, 6)]
    for fname in cat_fnames:
        add_cat_feat(df_test, fname)

    #   Run
    corr = plot_feat_correlations(df_test, return_df=True)

    #   Verify
    assert corr.shape[1] == df_test.shape[1] - 5
    assert "categorical" not in " ".join(corr.columns)


test_non_numericals_dropped()
